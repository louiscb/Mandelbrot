defmodule Brot do
  def mandelbrot(c, m) do
    z0 = Complex.new(0, 0)
    test(0, z0, c, m)
    PPM.write('image.ppm', [[{:rgb, 100,100,100}]])
  end

  def test(i, z, c , m) do
    if Complex.abs(z) > 2 do
      i
    else
      if (i == m) do
        # part of mandelbrot set
        0
      else
        z = Complex.add(Complex.sqr(z), c)
        test(i+1, z, c , m)
      end
    end
  end
end

defmodule Complex do
  def new(r, i) do
    #r + i(i)
    {:complex, r, i}
  end

  def add({:complex, aR, aI}, {:complex, bR, bI}) do
    {:complex, aR + bR, aI + bI}
  end

  def sqr({:complex, r, i}) do
    {:complex, (r*r) - (i*i), 2*r*i}
  end

  def abs({:complex, r, i}) do
    :math.sqrt((r*r)+(i*i))
  end
end

defmodule Color do
  def convert(depth, max) do
    f = depth/max
    a = f * 4
    x = trunc(a)
    y = trunc(255*(a-x))
    case x do
      0 -> {y, 0 ,0}
      1 -> {255, y, 0}
      2 -> {255-y, 255, 0}
      3 -> {0, 255, y}
      4 -> {0, 255-y, 255}
    end
  end
end

defmodule PPM do

  # write(name, image) The image is a list of rows, each row a list of
  # tuples {R,G,B}. The RGB values are 0-255.
  def write(name, image) do
    height = length(image)
    width = length(List.first(image))
    {:ok, fd} = File.open(name, [:write])
    IO.puts(fd, "P6")
    IO.puts(fd, "#generated by ppm.ex")
    IO.puts(fd, "#{width} #{height}")
    IO.puts(fd, "255")
    rows(image, fd)
    File.close(fd)
  end

  defp rows(rows, fd) do
    Enum.each(rows, fn(r) ->
      colors = row(r)
      IO.write(fd, colors)
    end)
  end

  defp row(row) do
    List.foldr(row, [], fn({:rgb, r, g, b}, a) ->
      [r, g, b | a]
    end)
  end

end
